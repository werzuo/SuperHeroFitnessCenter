/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.werzuo.shfcms.view;

import com.werzuo.shfcms.common.IDGenarator;
import com.werzuo.shfcms.common.Validation;
import com.werzuo.shfcms.model.Measurement;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.LineBorder;

/**
 *
 * @author kaushalya
 */
public class SchedulePanel extends javax.swing.JPanel {

    /**
     * Creates new form SchedulePanel
     */
    private HomeFrame homeFrame;

    public SchedulePanel(HomeFrame h) {
        initComponents();
        this.homeFrame = h;
        setBodyLabelFalse();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMemberID = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        lblHipsButtoks = new javax.swing.JLabel();
        lblWaist = new javax.swing.JLabel();
        lblThightL = new javax.swing.JLabel();
        lblThightR = new javax.swing.JLabel();
        lblCalfL = new javax.swing.JLabel();
        lblCalfR = new javax.swing.JLabel();
        lblNeck = new javax.swing.JLabel();
        lblAbs = new javax.swing.JLabel();
        lblChest = new javax.swing.JLabel();
        lblforearmL = new javax.swing.JLabel();
        lblForearmR = new javax.swing.JLabel();
        lblBicepL = new javax.swing.JLabel();
        lblBicepR = new javax.swing.JLabel();
        lblTricepL = new javax.swing.JLabel();
        lblTricepR = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtChest = new javax.swing.JTextField();
        txtRThight = new javax.swing.JTextField();
        txtLThight = new javax.swing.JTextField();
        lblLeft10 = new javax.swing.JLabel();
        lblLeft9 = new javax.swing.JLabel();
        lblRight3 = new javax.swing.JLabel();
        lblLeft3 = new javax.swing.JLabel();
        lblLeft4 = new javax.swing.JLabel();
        lblLeft13 = new javax.swing.JLabel();
        lblLeft14 = new javax.swing.JLabel();
        txtLForeArm = new javax.swing.JTextField();
        txtRForeArm = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        lblRight2 = new javax.swing.JLabel();
        lblLeft1 = new javax.swing.JLabel();
        lblLeft2 = new javax.swing.JLabel();
        lblRight = new javax.swing.JLabel();
        txtRCalf = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtHipsButtoks = new javax.swing.JTextField();
        lblLeft18 = new javax.swing.JLabel();
        txtLCalf = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblLeft6 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        lblLeft7 = new javax.swing.JLabel();
        txtNeck = new javax.swing.JTextField();
        lblLeft19 = new javax.swing.JLabel();
        lblLeft16 = new javax.swing.JLabel();
        lblLeft15 = new javax.swing.JLabel();
        lblLeft12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtWaist = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        lblLeft17 = new javax.swing.JLabel();
        lblLeft11 = new javax.swing.JLabel();
        txtRArm = new javax.swing.JTextField();
        lblRight1 = new javax.swing.JLabel();
        lblLeft = new javax.swing.JLabel();
        txtLArm = new javax.swing.JTextField();
        lblLeft5 = new javax.swing.JLabel();
        txtAbdomen = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        btnNext = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(47, 227, 117), 2));
        setLayout(null);

        txtMemberID.setBackground(new java.awt.Color(0, 0, 0));
        txtMemberID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtMemberID.setForeground(new java.awt.Color(255, 255, 255));
        txtMemberID.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMemberID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtMemberID.setCaretColor(new java.awt.Color(255, 255, 255));
        txtMemberID.setOpaque(false);
        txtMemberID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIDActionPerformed(evt);
            }
        });
        add(txtMemberID);
        txtMemberID.setBounds(220, 30, 170, 30);

        jLabel23.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel23.setText("MemberShip Number");
        add(jLabel23);
        jLabel23.setBounds(40, 30, 160, 30);

        lblHipsButtoks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/hipsButtlook.png"))); // NOI18N
        add(lblHipsButtoks);
        lblHipsButtoks.setBounds(776, 250, 100, 40);

        lblWaist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/weist.png"))); // NOI18N
        add(lblWaist);
        lblWaist.setBounds(788, 238, 90, 30);

        lblThightL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/thightLeft.png"))); // NOI18N
        add(lblThightL);
        lblThightL.setBounds(770, 293, 50, 100);

        lblThightR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/thightRight.png"))); // NOI18N
        add(lblThightR);
        lblThightR.setBounds(838, 291, 50, 90);

        lblCalfL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/calfLeft.png"))); // NOI18N
        add(lblCalfL);
        lblCalfL.setBounds(795, 392, 40, 50);

        lblCalfR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/calfRight.png"))); // NOI18N
        add(lblCalfR);
        lblCalfR.setBounds(860, 390, 30, 60);

        lblNeck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/neck.png"))); // NOI18N
        add(lblNeck);
        lblNeck.setBounds(816, 98, 50, 30);

        lblAbs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/abs_1.png"))); // NOI18N
        add(lblAbs);
        lblAbs.setBounds(789, 173, 80, 70);

        lblChest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/chest.png"))); // NOI18N
        add(lblChest);
        lblChest.setBounds(773, 106, 100, 70);

        lblforearmL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/forearmLeft.png"))); // NOI18N
        add(lblforearmL);
        lblforearmL.setBounds(700, 70, 40, 60);

        lblForearmR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/forearmRight.png"))); // NOI18N
        add(lblForearmR);
        lblForearmR.setBounds(909, 60, 40, 50);

        lblBicepL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/bicepsLeft.png"))); // NOI18N
        add(lblBicepL);
        lblBicepL.setBounds(730, 106, 70, 30);

        lblBicepR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/bicepsRight.png"))); // NOI18N
        add(lblBicepR);
        lblBicepR.setBounds(881, 99, 50, 30);

        lblTricepL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/tricepsLeft.png"))); // NOI18N
        add(lblTricepL);
        lblTricepL.setBounds(710, 131, 70, 20);

        lblTricepR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/trcepsRight.png"))); // NOI18N
        add(lblTricepR);
        lblTricepR.setBounds(880, 120, 70, 30);

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/CaptainBaiceps.png"))); // NOI18N
        add(jLabel22);
        jLabel22.setBounds(700, 40, 270, 480);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Abdomen");
        add(jLabel11);
        jLabel11.setBounds(40, 230, 100, 30);

        txtChest.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtChest.setForeground(new java.awt.Color(255, 255, 255));
        txtChest.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtChest.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtChest.setCaretColor(new java.awt.Color(255, 255, 255));
        txtChest.setOpaque(false);
        txtChest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChestActionPerformed(evt);
            }
        });
        txtChest.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtChestKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtChestKeyReleased(evt);
            }
        });
        add(txtChest);
        txtChest.setBounds(140, 160, 100, 30);

        txtRThight.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtRThight.setForeground(new java.awt.Color(255, 255, 255));
        txtRThight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRThight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtRThight.setCaretColor(new java.awt.Color(255, 255, 255));
        txtRThight.setOpaque(false);
        txtRThight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRThightActionPerformed(evt);
            }
        });
        txtRThight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRThightKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRThightKeyReleased(evt);
            }
        });
        add(txtRThight);
        txtRThight.setBounds(530, 130, 100, 30);

        txtLThight.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtLThight.setForeground(new java.awt.Color(255, 255, 255));
        txtLThight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLThight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtLThight.setCaretColor(new java.awt.Color(255, 255, 255));
        txtLThight.setOpaque(false);
        txtLThight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLThightActionPerformed(evt);
            }
        });
        txtLThight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLThightKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLThightKeyReleased(evt);
            }
        });
        add(txtLThight);
        txtLThight.setBounds(350, 130, 100, 30);

        lblLeft10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft10.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft10.setText("inch");
        add(lblLeft10);
        lblLeft10.setBounds(640, 130, 40, 30);

        lblLeft9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft9.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft9.setText("inch");
        add(lblLeft9);
        lblLeft9.setBounds(460, 130, 40, 30);

        lblRight3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRight3.setForeground(new java.awt.Color(153, 0, 0));
        lblRight3.setText("R");
        add(lblRight3);
        lblRight3.setBounds(510, 130, 20, 30);

        lblLeft3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft3.setForeground(new java.awt.Color(153, 0, 0));
        lblLeft3.setText("L");
        add(lblLeft3);
        lblLeft3.setBounds(330, 130, 20, 30);

        lblLeft4.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft4.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft4.setText("inch");
        add(lblLeft4);
        lblLeft4.setBounds(250, 90, 40, 30);

        lblLeft13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft13.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft13.setText("inch");
        add(lblLeft13);
        lblLeft13.setBounds(460, 370, 40, 30);

        lblLeft14.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft14.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft14.setText("inch");
        add(lblLeft14);
        lblLeft14.setBounds(640, 370, 40, 30);

        txtLForeArm.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtLForeArm.setForeground(new java.awt.Color(255, 255, 255));
        txtLForeArm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLForeArm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtLForeArm.setCaretColor(new java.awt.Color(255, 255, 255));
        txtLForeArm.setOpaque(false);
        txtLForeArm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLForeArmActionPerformed(evt);
            }
        });
        txtLForeArm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLForeArmKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLForeArmKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtLForeArmKeyTyped(evt);
            }
        });
        add(txtLForeArm);
        txtLForeArm.setBounds(350, 370, 100, 30);

        txtRForeArm.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtRForeArm.setForeground(new java.awt.Color(255, 255, 255));
        txtRForeArm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRForeArm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtRForeArm.setCaretColor(new java.awt.Color(255, 255, 255));
        txtRForeArm.setOpaque(false);
        txtRForeArm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRForeArmActionPerformed(evt);
            }
        });
        txtRForeArm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRForeArmKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRForeArmKeyReleased(evt);
            }
        });
        add(txtRForeArm);
        txtRForeArm.setBounds(530, 370, 100, 30);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("Calf");
        add(jLabel16);
        jLabel16.setBounds(330, 450, 100, 30);

        lblRight2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRight2.setForeground(new java.awt.Color(153, 0, 0));
        lblRight2.setText("R");
        add(lblRight2);
        lblRight2.setBounds(510, 370, 20, 30);

        lblLeft1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft1.setForeground(new java.awt.Color(153, 0, 0));
        lblLeft1.setText("L");
        add(lblLeft1);
        lblLeft1.setBounds(330, 370, 20, 30);

        lblLeft2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft2.setForeground(new java.awt.Color(153, 0, 0));
        lblLeft2.setText("L");
        add(lblLeft2);
        lblLeft2.setBounds(330, 490, 20, 30);

        lblRight.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRight.setForeground(new java.awt.Color(153, 0, 0));
        lblRight.setText("R");
        add(lblRight);
        lblRight.setBounds(510, 490, 20, 30);

        txtRCalf.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtRCalf.setForeground(new java.awt.Color(255, 255, 255));
        txtRCalf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRCalf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtRCalf.setCaretColor(new java.awt.Color(255, 255, 255));
        txtRCalf.setOpaque(false);
        txtRCalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRCalfActionPerformed(evt);
            }
        });
        txtRCalf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRCalfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRCalfKeyReleased(evt);
            }
        });
        add(txtRCalf);
        txtRCalf.setBounds(530, 490, 100, 30);

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Hips Buttoks");
        add(jLabel14);
        jLabel14.setBounds(40, 300, 100, 30);

        txtHipsButtoks.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtHipsButtoks.setForeground(new java.awt.Color(255, 255, 255));
        txtHipsButtoks.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtHipsButtoks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtHipsButtoks.setCaretColor(new java.awt.Color(255, 255, 255));
        txtHipsButtoks.setOpaque(false);
        txtHipsButtoks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHipsButtoksActionPerformed(evt);
            }
        });
        txtHipsButtoks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHipsButtoksKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHipsButtoksKeyReleased(evt);
            }
        });
        add(txtHipsButtoks);
        txtHipsButtoks.setBounds(140, 300, 100, 30);

        lblLeft18.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft18.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft18.setText("inch");
        add(lblLeft18);
        lblLeft18.setBounds(250, 160, 40, 30);

        txtLCalf.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtLCalf.setForeground(new java.awt.Color(255, 255, 255));
        txtLCalf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLCalf.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtLCalf.setCaretColor(new java.awt.Color(255, 255, 255));
        txtLCalf.setOpaque(false);
        txtLCalf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLCalfActionPerformed(evt);
            }
        });
        txtLCalf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLCalfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLCalfKeyReleased(evt);
            }
        });
        add(txtLCalf);
        txtLCalf.setBounds(350, 490, 100, 30);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Neck");
        add(jLabel15);
        jLabel15.setBounds(40, 90, 100, 30);

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel20.setText("Weight");
        add(jLabel20);
        jLabel20.setBounds(40, 440, 100, 30);

        txtWeight.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtWeight.setForeground(new java.awt.Color(255, 255, 255));
        txtWeight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtWeight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtWeight.setCaretColor(new java.awt.Color(255, 255, 255));
        txtWeight.setOpaque(false);
        txtWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWeightActionPerformed(evt);
            }
        });
        txtWeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtWeightKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWeightKeyReleased(evt);
            }
        });
        add(txtWeight);
        txtWeight.setBounds(140, 440, 100, 30);

        lblLeft6.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft6.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft6.setText("Kg");
        add(lblLeft6);
        lblLeft6.setBounds(250, 440, 40, 30);

        txtHeight.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtHeight.setForeground(new java.awt.Color(255, 255, 255));
        txtHeight.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtHeight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtHeight.setCaretColor(new java.awt.Color(255, 255, 255));
        txtHeight.setOpaque(false);
        txtHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHeightActionPerformed(evt);
            }
        });
        txtHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHeightKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtHeightKeyReleased(evt);
            }
        });
        add(txtHeight);
        txtHeight.setBounds(140, 510, 100, 30);

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel21.setText("Height");
        add(jLabel21);
        jLabel21.setBounds(40, 510, 100, 30);

        lblLeft7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft7.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft7.setText("cm");
        add(lblLeft7);
        lblLeft7.setBounds(250, 510, 40, 30);

        txtNeck.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtNeck.setForeground(new java.awt.Color(255, 255, 255));
        txtNeck.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNeck.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtNeck.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNeck.setOpaque(false);
        txtNeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNeckActionPerformed(evt);
            }
        });
        txtNeck.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNeckKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNeckKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNeckKeyTyped(evt);
            }
        });
        add(txtNeck);
        txtNeck.setBounds(140, 90, 100, 30);

        lblLeft19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft19.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft19.setText("inch");
        add(lblLeft19);
        lblLeft19.setBounds(250, 300, 40, 30);

        lblLeft16.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft16.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft16.setText("inch");
        add(lblLeft16);
        lblLeft16.setBounds(640, 490, 40, 30);

        lblLeft15.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft15.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft15.setText("inch");
        add(lblLeft15);
        lblLeft15.setBounds(460, 490, 40, 30);

        lblLeft12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft12.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft12.setText("inch");
        add(lblLeft12);
        lblLeft12.setBounds(460, 240, 50, 30);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Waist");
        add(jLabel13);
        jLabel13.setBounds(40, 370, 100, 30);

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("Forearm");
        add(jLabel19);
        jLabel19.setBounds(330, 330, 100, 30);

        txtWaist.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtWaist.setForeground(new java.awt.Color(255, 255, 255));
        txtWaist.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtWaist.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtWaist.setCaretColor(new java.awt.Color(255, 255, 255));
        txtWaist.setOpaque(false);
        txtWaist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWaistActionPerformed(evt);
            }
        });
        txtWaist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtWaistKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtWaistKeyReleased(evt);
            }
        });
        add(txtWaist);
        txtWaist.setBounds(140, 370, 100, 30);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Arm");
        add(jLabel18);
        jLabel18.setBounds(330, 200, 100, 30);

        lblLeft17.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft17.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft17.setText("inch");
        add(lblLeft17);
        lblLeft17.setBounds(250, 370, 40, 30);

        lblLeft11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft11.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft11.setText("inch");
        add(lblLeft11);
        lblLeft11.setBounds(640, 240, 40, 30);

        txtRArm.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtRArm.setForeground(new java.awt.Color(255, 255, 255));
        txtRArm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRArm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtRArm.setCaretColor(new java.awt.Color(255, 255, 255));
        txtRArm.setOpaque(false);
        txtRArm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRArmActionPerformed(evt);
            }
        });
        txtRArm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRArmKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRArmKeyReleased(evt);
            }
        });
        add(txtRArm);
        txtRArm.setBounds(530, 240, 100, 30);

        lblRight1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblRight1.setForeground(new java.awt.Color(153, 0, 0));
        lblRight1.setText("R");
        add(lblRight1);
        lblRight1.setBounds(510, 240, 20, 30);

        lblLeft.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft.setForeground(new java.awt.Color(153, 0, 0));
        lblLeft.setText("L");
        add(lblLeft);
        lblLeft.setBounds(330, 240, 20, 30);

        txtLArm.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtLArm.setForeground(new java.awt.Color(255, 255, 255));
        txtLArm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtLArm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtLArm.setCaretColor(new java.awt.Color(255, 255, 255));
        txtLArm.setOpaque(false);
        txtLArm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLArmActionPerformed(evt);
            }
        });
        txtLArm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLArmKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtLArmKeyReleased(evt);
            }
        });
        add(txtLArm);
        txtLArm.setBounds(350, 240, 100, 30);

        lblLeft5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblLeft5.setForeground(new java.awt.Color(102, 102, 102));
        lblLeft5.setText("inch");
        add(lblLeft5);
        lblLeft5.setBounds(250, 230, 40, 30);

        txtAbdomen.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtAbdomen.setForeground(new java.awt.Color(255, 255, 255));
        txtAbdomen.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtAbdomen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        txtAbdomen.setCaretColor(new java.awt.Color(255, 255, 255));
        txtAbdomen.setOpaque(false);
        txtAbdomen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAbdomenActionPerformed(evt);
            }
        });
        txtAbdomen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAbdomenKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAbdomenKeyReleased(evt);
            }
        });
        add(txtAbdomen);
        txtAbdomen.setBounds(140, 230, 100, 30);

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Thight");
        add(jLabel17);
        jLabel17.setBounds(330, 90, 100, 30);

        btnNext.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnNext.setForeground(new java.awt.Color(255, 255, 255));
        btnNext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnNext.setText("Next");
        btnNext.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnNextMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnNextMouseExited(evt);
            }
        });
        add(btnNext);
        btnNext.setBounds(830, 520, 120, 40);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Chest");
        add(jLabel12);
        jLabel12.setBounds(40, 160, 100, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(43, 227, 117));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Schedule");
        add(jLabel3);
        jLabel3.setBounds(840, 0, 130, 50);

        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/Untitled-1.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 227, 117), 2));
        add(jLabel2);
        jLabel2.setBounds(0, 0, 970, 570);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/panelBody.PNG"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 970, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void txtChestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChestActionPerformed
        txtAbdomen.requestFocus();
    }//GEN-LAST:event_txtChestActionPerformed

    private void txtRThightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRThightActionPerformed
        txtLThight.requestFocus();
    }//GEN-LAST:event_txtRThightActionPerformed

    private void txtLThightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLThightActionPerformed
        txtRArm.requestFocus();
    }//GEN-LAST:event_txtLThightActionPerformed

    private void txtLForeArmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLForeArmActionPerformed
        txtRCalf.requestFocus();
    }//GEN-LAST:event_txtLForeArmActionPerformed

    private void txtRForeArmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRForeArmActionPerformed
        txtLForeArm.requestFocus();
    }//GEN-LAST:event_txtRForeArmActionPerformed

    private void txtRCalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRCalfActionPerformed
        txtLCalf.requestFocus();
    }//GEN-LAST:event_txtRCalfActionPerformed

    private void txtRArmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRArmActionPerformed
        txtLArm.requestFocus();
    }//GEN-LAST:event_txtRArmActionPerformed

    private void txtLArmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLArmActionPerformed
        txtRForeArm.requestFocus();
    }//GEN-LAST:event_txtLArmActionPerformed

    private void txtAbdomenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAbdomenActionPerformed
        txtAbdomen.requestFocus();
    }//GEN-LAST:event_txtAbdomenActionPerformed

    private void txtWaistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWaistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWaistActionPerformed

    private void txtHipsButtoksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHipsButtoksActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHipsButtoksActionPerformed

    private void txtNeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNeckActionPerformed

    }//GEN-LAST:event_txtNeckActionPerformed

    private void txtWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWeightActionPerformed

    private void txtHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHeightActionPerformed

    private void btnNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseClicked
        btnNext.setForeground(new Color(43, 227, 117));
        checkValues();


    }//GEN-LAST:event_btnNextMouseClicked

    private void btnNextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseEntered
        btnNext.setBorder(new LineBorder(new Color(43, 227, 117)));
    }//GEN-LAST:event_btnNextMouseEntered

    private void btnNextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseExited
        btnNext.setBorder(new LineBorder(Color.WHITE));
        btnNext.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnNextMouseExited

    private void txtChestKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChestKeyReleased
        if (txtChest.getText().equals(".")) {
            txtChest.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtChest);
        }
        if (!txtChest.getText().equals("")) {
            lblChest.setVisible(true);
            txtChest.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblChest.setVisible(false);
            txtChest.setBorder(new LineBorder(Color.WHITE));
        }


    }//GEN-LAST:event_txtChestKeyReleased

    private void txtAbdomenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAbdomenKeyReleased
        if (txtAbdomen.getText().equals(".")) {
            txtAbdomen.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtAbdomen);
        }
        if (!txtAbdomen.getText().equals("")) {
            lblAbs.setVisible(true);
            txtAbdomen.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblAbs.setVisible(false);
            txtAbdomen.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtAbdomenKeyReleased

    private void txtWaistKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWaistKeyReleased
        if (txtWaist.getText().equals(".")) {
            txtWaist.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtWaist);
        }
        if (!txtWaist.getText().equals("")) {
            lblWaist.setVisible(true);
            txtWaist.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblWaist.setVisible(false);
            txtWaist.setBorder(new LineBorder(Color.white));
        }


    }//GEN-LAST:event_txtWaistKeyReleased

    private void txtHipsButtoksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHipsButtoksKeyReleased
        if (txtHipsButtoks.getText().equals(".")) {
            txtHipsButtoks.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtHipsButtoks);
        }
        if (!txtHipsButtoks.getText().equals("")) {
            lblHipsButtoks.setVisible(true);
            txtHipsButtoks.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblHipsButtoks.setVisible(false);
            txtHipsButtoks.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtHipsButtoksKeyReleased

    private void txtNeckKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNeckKeyReleased
        if (txtNeck.getText().equals(".")) {
            txtNeck.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtNeck);
        }
        if (!txtNeck.getText().equals("")) {
            lblNeck.setVisible(true);
            txtNeck.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            txtNeck.setBorder(new LineBorder(new Color(255, 255, 255)));
            lblNeck.setVisible(false);

        }


    }//GEN-LAST:event_txtNeckKeyReleased

    private void txtWeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWeightKeyReleased
        if (txtWeight.getText().equals(".")) {
            txtWeight.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtWeight);
        }
    }//GEN-LAST:event_txtWeightKeyReleased

    private void txtHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeightKeyReleased
        if (txtHeight.getText().equals(".")) {
            txtHeight.setText("");
        }

        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtHeight);
        }
    }//GEN-LAST:event_txtHeightKeyReleased

    private void txtRThightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRThightKeyReleased
        if (txtRThight.getText().equals(".")) {
            txtRThight.setText("");
        }

        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRThight);
        }
        if (!txtRThight.getText().equals("")) {
            lblThightR.setVisible(true);
            txtRThight.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblThightR.setVisible(false);
            txtRThight.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtRThightKeyReleased

    private void txtLThightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLThightKeyReleased
        if (txtLThight.getText().equals(".")) {
            txtLThight.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLThight);
        }
        if (!txtLThight.getText().equals("")) {
            lblThightL.setVisible(true);
            txtLThight.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblThightL.setVisible(false);
            txtLThight.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtLThightKeyReleased

    private void txtRArmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRArmKeyReleased
        if (txtRArm.getText().equals(".")) {
            txtRArm.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRArm);
        }
        if (!txtRArm.getText().equals("")) {
            lblBicepR.setVisible(true);
            lblTricepR.setVisible(true);
            txtRArm.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblBicepR.setVisible(false);
            lblTricepR.setVisible(false);
            txtRArm.setBorder(new LineBorder(Color.WHITE));
        }

    }//GEN-LAST:event_txtRArmKeyReleased

    private void txtLArmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLArmKeyReleased
        if (txtLArm.getText().equals(".")) {
            txtLArm.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLArm);
        }
        if (!txtLArm.getText().equals("")) {
            lblBicepL.setVisible(true);
            lblTricepL.setVisible(true);
            txtLArm.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblBicepL.setVisible(false);
            lblTricepL.setVisible(false);
            txtLArm.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtLArmKeyReleased

    private void txtRForeArmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRForeArmKeyReleased
        if (txtRForeArm.getText().equals(".")) {
            txtRForeArm.setText("");
        }

        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRForeArm);
        }
        if (!txtRForeArm.getText().equals("")) {
            lblForearmR.setVisible(true);
            txtRForeArm.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblForearmR.setVisible(false);
            txtRForeArm.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtRForeArmKeyReleased

    private void txtLForeArmKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLForeArmKeyReleased
        if (txtLForeArm.getText().equals(".")) {
            txtLForeArm.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLForeArm);
        }
        if (!txtLForeArm.getText().equals("")) {
            lblforearmL.setVisible(true);
            txtLForeArm.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblforearmL.setVisible(false);
            txtLForeArm.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtLForeArmKeyReleased

    private void txtRCalfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRCalfKeyReleased
        if (txtRCalf.getText().equals(".")) {
            txtRCalf.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRCalf);
        }
        if (!txtRCalf.getText().equals("")) {
            lblCalfR.setVisible(true);
            txtRCalf.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblCalfR.setVisible(false);
            txtRCalf.setBorder(new LineBorder(Color.white));
        }

    }//GEN-LAST:event_txtRCalfKeyReleased

    private void txtLCalfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLCalfKeyReleased
        if (txtLCalf.getText().equals(".")) {
            txtLCalf.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLCalf);
        }
        if (!txtLCalf.getText().equals("")) {
            lblCalfL.setVisible(true);
            txtLCalf.setBorder(new LineBorder(new Color(43, 227, 117)));
        } else {
            lblCalfL.setVisible(false);
            txtLCalf.setBorder(new LineBorder(Color.white));
        }
    }//GEN-LAST:event_txtLCalfKeyReleased

    private void txtChestKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtChestKeyPressed
        if (txtChest.getText().equals(".")) {
            txtChest.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtChest);
        }
        if (!txtChest.getText().equals("")) {
            lblChest.setVisible(true);
        } else {
            lblChest.setVisible(false);
        }
    }//GEN-LAST:event_txtChestKeyPressed

    private void txtNeckKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNeckKeyPressed
        if (txtNeck.getText().equals(".")) {
            txtNeck.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtNeck);
        }
        if (!txtNeck.getText().equals("")) {
            lblNeck.setVisible(true);
        } else {
            lblNeck.setVisible(false);
        }

    }//GEN-LAST:event_txtNeckKeyPressed

    private void txtNeckKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNeckKeyTyped
        if (txtNeck.getText().equals(".")) {
            txtNeck.setText("");
        }
    }//GEN-LAST:event_txtNeckKeyTyped

    private void txtAbdomenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAbdomenKeyPressed
        if (txtAbdomen.getText().equals(".")) {
            txtAbdomen.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtAbdomen);
        }
        if (!txtAbdomen.getText().equals("")) {
            lblAbs.setVisible(true);
        } else {
            lblAbs.setVisible(false);
        }

    }//GEN-LAST:event_txtAbdomenKeyPressed

    private void txtHipsButtoksKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHipsButtoksKeyPressed
        if (txtHipsButtoks.getText().equals(".")) {
            txtHipsButtoks.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtHipsButtoks);
        }
        if (!txtHipsButtoks.getText().equals("")) {
            lblHipsButtoks.setVisible(true);
        } else {
            lblHipsButtoks.setVisible(false);
        }

    }//GEN-LAST:event_txtHipsButtoksKeyPressed

    private void txtWaistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWaistKeyPressed
        if (txtWaist.getText().equals(".")) {
            txtWaist.setText("");
        }

        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtWaist);
        }

        if (!txtWaist.getText().equals("")) {
            lblWaist.setVisible(true);
        } else {
            lblWaist.setVisible(false);
        }
    }//GEN-LAST:event_txtWaistKeyPressed

    private void txtRThightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRThightKeyPressed
        if (txtRThight.getText().equals(".")) {
            txtRThight.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRForeArm);
        }
        if (!txtRThight.getText().equals("")) {
            lblThightR.setVisible(true);
        } else {
            lblThightR.setVisible(false);
        }

    }//GEN-LAST:event_txtRThightKeyPressed

    private void txtLThightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLThightKeyPressed
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLThight);
        }
        if (!txtLThight.getText().equals("")) {
            lblThightL.setVisible(true);
        } else {
            lblThightL.setVisible(false);
        }

    }//GEN-LAST:event_txtLThightKeyPressed

    private void txtRArmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRArmKeyPressed
        if (txtRArm.getText().equals(".")) {
            txtRArm.setText("");
        }

        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRArm);
        }
        if (!txtRArm.getText().equals("")) {
            lblBicepR.setVisible(true);
            lblTricepR.setVisible(true);
        } else {
            lblBicepR.setVisible(false);
            lblTricepR.setVisible(false);
        }

    }//GEN-LAST:event_txtRArmKeyPressed

    private void txtLArmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLArmKeyPressed
        if (txtLArm.getText().equals(".")) {
            txtLArm.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLArm);
        }
        if (!txtLArm.getText().equals("")) {
            lblBicepL.setVisible(true);
            lblTricepL.setVisible(true);
        } else {
            lblBicepL.setVisible(false);
            lblTricepL.setVisible(false);
        }

    }//GEN-LAST:event_txtLArmKeyPressed

    private void txtLForeArmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLForeArmKeyPressed
        if (txtLForeArm.getText().equals(".")) {
            txtLForeArm.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLForeArm);
        }
        if (!txtLForeArm.getText().equals("")) {
            lblforearmL.setVisible(true);
        } else {
            lblforearmL.setVisible(false);
        }

    }//GEN-LAST:event_txtLForeArmKeyPressed

    private void txtRForeArmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRForeArmKeyPressed
        if (txtRForeArm.getText().equals(".")) {
            txtRForeArm.setText("");
        }

        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRForeArm);
        }
        if (!txtRForeArm.getText().equals("")) {
            lblForearmR.setVisible(true);
        } else {
            lblForearmR.setVisible(false);
        }

    }//GEN-LAST:event_txtRForeArmKeyPressed

    private void txtLCalfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLCalfKeyPressed
        if (txtLCalf.getText().equals(".")) {
            txtLCalf.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtLCalf);
        }
        if (!txtLCalf.getText().equals("")) {
            lblCalfL.setVisible(true);
        } else {
            lblCalfL.setVisible(false);
        }

    }//GEN-LAST:event_txtLCalfKeyPressed

    private void txtRCalfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRCalfKeyPressed
        if (txtRCalf.getText().equals(".")) {
            txtRCalf.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtRCalf);
        }
        if (!txtRCalf.getText().equals("")) {
            lblCalfR.setVisible(true);
        } else {
            lblCalfR.setVisible(false);
        }

    }//GEN-LAST:event_txtRCalfKeyPressed

    private void txtWeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtWeightKeyPressed
        if (txtWeight.getText().equals(".")) {
            txtWeight.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtWeight);
        }
    }//GEN-LAST:event_txtWeightKeyPressed

    private void txtHeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHeightKeyPressed
        if (txtHeight.getText().equals(".")) {
            txtHeight.setText("");
        }
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.priceText(txtHeight);
        }
    }//GEN-LAST:event_txtHeightKeyPressed

    private void txtLForeArmKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLForeArmKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLForeArmKeyTyped

    private void txtMemberIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMemberIDActionPerformed

    private void txtLCalfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLCalfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLCalfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnNext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblAbs;
    private javax.swing.JLabel lblBicepL;
    private javax.swing.JLabel lblBicepR;
    private javax.swing.JLabel lblCalfL;
    private javax.swing.JLabel lblCalfR;
    private javax.swing.JLabel lblChest;
    private javax.swing.JLabel lblForearmR;
    private javax.swing.JLabel lblHipsButtoks;
    private javax.swing.JLabel lblLeft;
    private javax.swing.JLabel lblLeft1;
    private javax.swing.JLabel lblLeft10;
    private javax.swing.JLabel lblLeft11;
    private javax.swing.JLabel lblLeft12;
    private javax.swing.JLabel lblLeft13;
    private javax.swing.JLabel lblLeft14;
    private javax.swing.JLabel lblLeft15;
    private javax.swing.JLabel lblLeft16;
    private javax.swing.JLabel lblLeft17;
    private javax.swing.JLabel lblLeft18;
    private javax.swing.JLabel lblLeft19;
    private javax.swing.JLabel lblLeft2;
    private javax.swing.JLabel lblLeft3;
    private javax.swing.JLabel lblLeft4;
    private javax.swing.JLabel lblLeft5;
    private javax.swing.JLabel lblLeft6;
    private javax.swing.JLabel lblLeft7;
    private javax.swing.JLabel lblLeft9;
    private javax.swing.JLabel lblNeck;
    private javax.swing.JLabel lblRight;
    private javax.swing.JLabel lblRight1;
    private javax.swing.JLabel lblRight2;
    private javax.swing.JLabel lblRight3;
    private javax.swing.JLabel lblThightL;
    private javax.swing.JLabel lblThightR;
    private javax.swing.JLabel lblTricepL;
    private javax.swing.JLabel lblTricepR;
    private javax.swing.JLabel lblWaist;
    private javax.swing.JLabel lblforearmL;
    private javax.swing.JTextField txtAbdomen;
    private javax.swing.JTextField txtChest;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtHipsButtoks;
    private javax.swing.JTextField txtLArm;
    private javax.swing.JTextField txtLCalf;
    private javax.swing.JTextField txtLForeArm;
    private javax.swing.JTextField txtLThight;
    private javax.swing.JTextField txtMemberID;
    private javax.swing.JTextField txtNeck;
    private javax.swing.JTextField txtRArm;
    private javax.swing.JTextField txtRCalf;
    private javax.swing.JTextField txtRForeArm;
    private javax.swing.JTextField txtRThight;
    private javax.swing.JTextField txtWaist;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    /**
     * set label visibility false
     */
    private void setBodyLabelFalse() {
        lblNeck.setVisible(false);
        lblChest.setVisible(false);
        lblBicepL.setVisible(false);
        lblBicepR.setVisible(false);
        lblTricepL.setVisible(false);
        lblTricepR.setVisible(false);
        lblForearmR.setVisible(false);
        lblforearmL.setVisible(false);
        lblWaist.setVisible(false);
        lblAbs.setVisible(false);
        lblHipsButtoks.setVisible(false);
        lblThightL.setVisible(false);
        lblThightR.setVisible(false);
        lblCalfL.setVisible(false);
        lblCalfR.setVisible(false);
    }

    /**
     * create new object and send it to the next page
     */
    private void passToNextPage() {
        String memberShipNumber = txtMemberID.getText();
        String mid = newID();
        double chest = Double.parseDouble(txtChest.getText());
        double abdomen = Double.parseDouble(txtAbdomen.getText());
        double waist = Double.parseDouble(txtWaist.getText());
        double hipsButtooks = Double.parseDouble(txtHipsButtoks.getText());
        double neck = Double.parseDouble(txtNeck.getText());
        double thightLeft = Double.parseDouble(txtLThight.getText());
        double thightRight = Double.parseDouble(txtRThight.getText());
        double armLeft = Double.parseDouble(txtLArm.getText());
        double armRight = Double.parseDouble(txtRArm.getText());
        double forearmLeft = Double.parseDouble(txtLForeArm.getText());
        double forearmRight = Double.parseDouble(txtRThight.getText());
        double calfLeft = Double.parseDouble(txtLCalf.getText());
        double calfRight = Double.parseDouble(txtRCalf.getText());
        String scheduleId = null;
        double height = Double.parseDouble(txtHeight.getText());
        double weight = Double.parseDouble(txtWeight.getText());

        Measurement measurement = new Measurement(mid, chest, abdomen, waist, hipsButtooks, neck,
                thightLeft, thightRight, armLeft, armRight, forearmLeft, forearmRight, calfLeft, calfRight, scheduleId, height, weight);

        MakeShedulePanel mkp = new MakeShedulePanel(homeFrame, measurement, memberShipNumber);

        homeFrame.panelBody.removeAll();
        mkp.setSize(homeFrame.panelBody.getSize());
        homeFrame.panelBody.add(mkp);
        homeFrame.panelBody.repaint();
        homeFrame.panelBody.revalidate();
    }

    /**
     *
     * @return new Id
     */
    private String newID() {
        String newID = null;
        try {
            newID = IDGenarator.getNewID("measurement", "mid", "MM");

        } catch (SQLException ex) {
            Logger.getLogger(MemberRegPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MemberRegPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return newID;
    }

    /**
     * check all text fields are empty
     */
    private void checkValues() {

        if (txtChest.getText().isEmpty() || txtAbdomen.getText().isEmpty() || txtWaist.getText().isEmpty()
                || txtHipsButtoks.getText().isEmpty() || txtNeck.getText().isEmpty()
                || txtLThight.getText().isEmpty() || txtRThight.getText().isEmpty()
                || txtLArm.getText().isEmpty() || txtRArm.getText().isEmpty()
                || txtLForeArm.getText().isEmpty() || txtRThight.getText().isEmpty()
                || txtLCalf.getText().isEmpty() || txtRCalf.getText().isEmpty()
                || txtHeight.getText().isEmpty() || txtWaist.getText().isEmpty()) {
            new OptionPaneAddedSuccess(homeFrame, true, "     please fill all feilds..");
        } else {
            passToNextPage();
        }
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.werzuo.shfcms.view;

import com.werzuo.shfcms.controller.EventController;
import com.werzuo.shfcms.controllerfactoryimpl.ControllerFactoryImpl;
import com.werzuo.shfcms.model.Events;
import static com.werzuo.shfcms.view.HomeFrame.panelBody;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 * @author robin
 *
 */
public class EventPanel extends javax.swing.JPanel {

    /**
     * Creates new form EventPanel
     */
    private HomeFrame homeFrame;

    public EventPanel() {
        initComponents();
        loadToTable();
    }

    public EventPanel(HomeFrame homeFrame) {
        initComponents();
        this.homeFrame = homeFrame;
        loadToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datePickerEventDate = new org.jdesktop.swingx.JXDatePicker();
        lblModfyEventBt1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtEventChargers = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtEventPlace = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtEventTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEvents = new javax.swing.JTable();
        txtEventDescription = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtEventId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblModfyEventBt = new javax.swing.JLabel();
        lblModifyEventBt = new javax.swing.JLabel();
        lblAddEventBt = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        datePickerEventDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datePickerEventDateActionPerformed(evt);
            }
        });
        add(datePickerEventDate);
        datePickerEventDate.setBounds(160, 180, 160, 30);

        lblModfyEventBt1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblModfyEventBt1.setForeground(new java.awt.Color(255, 255, 255));
        lblModfyEventBt1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblModfyEventBt1.setText("Back");
        lblModfyEventBt1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblModfyEventBt1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModfyEventBt1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblModfyEventBt1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblModfyEventBt1MouseExited(evt);
            }
        });
        add(lblModfyEventBt1);
        lblModfyEventBt1.setBounds(810, 500, 120, 40);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(43, 217, 127));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Manage Your Events");
        add(jLabel9);
        jLabel9.setBounds(720, 20, 230, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Chagers");
        add(jLabel7);
        jLabel7.setBounds(70, 320, 70, 30);

        txtEventChargers.setBackground(new java.awt.Color(0, 0, 0));
        txtEventChargers.setForeground(new java.awt.Color(255, 255, 255));
        txtEventChargers.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEventChargers.setOpaque(false);
        add(txtEventChargers);
        txtEventChargers.setBounds(160, 320, 160, 30);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Place");
        add(jLabel8);
        jLabel8.setBounds(70, 270, 70, 30);

        txtEventPlace.setBackground(new java.awt.Color(0, 0, 0));
        txtEventPlace.setForeground(new java.awt.Color(255, 255, 255));
        txtEventPlace.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEventPlace.setOpaque(false);
        txtEventPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventPlaceActionPerformed(evt);
            }
        });
        add(txtEventPlace);
        txtEventPlace.setBounds(160, 270, 160, 30);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Time");
        add(jLabel5);
        jLabel5.setBounds(70, 220, 70, 30);

        txtEventTime.setBackground(new java.awt.Color(0, 0, 0));
        txtEventTime.setForeground(new java.awt.Color(255, 255, 255));
        txtEventTime.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEventTime.setOpaque(false);
        txtEventTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventTimeActionPerformed(evt);
            }
        });
        add(txtEventTime);
        txtEventTime.setBounds(160, 220, 160, 30);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Date");
        add(jLabel6);
        jLabel6.setBounds(70, 180, 70, 30);

        tblEvents.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tblEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Name", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEvents.setRowHeight(25);
        tblEvents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEventsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblEvents);
        if (tblEvents.getColumnModel().getColumnCount() > 0) {
            tblEvents.getColumnModel().getColumn(2).setMinWidth(110);
            tblEvents.getColumnModel().getColumn(2).setPreferredWidth(110);
            tblEvents.getColumnModel().getColumn(2).setMaxWidth(110);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(570, 70, 380, 402);

        txtEventDescription.setBackground(new java.awt.Color(0, 0, 0));
        txtEventDescription.setForeground(new java.awt.Color(255, 255, 255));
        txtEventDescription.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEventDescription.setOpaque(false);
        txtEventDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventDescriptionActionPerformed(evt);
            }
        });
        add(txtEventDescription);
        txtEventDescription.setBounds(160, 140, 160, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Event Id");
        add(jLabel4);
        jLabel4.setBounds(70, 100, 70, 30);

        txtEventId.setBackground(new java.awt.Color(0, 0, 0));
        txtEventId.setForeground(new java.awt.Color(255, 255, 255));
        txtEventId.setCaretColor(new java.awt.Color(255, 255, 255));
        txtEventId.setOpaque(false);
        txtEventId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventIdActionPerformed(evt);
            }
        });
        add(txtEventId);
        txtEventId.setBounds(160, 100, 160, 30);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Event Name");
        add(jLabel2);
        jLabel2.setBounds(70, 140, 80, 30);

        lblModfyEventBt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblModfyEventBt.setForeground(new java.awt.Color(255, 255, 255));
        lblModfyEventBt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblModfyEventBt.setText("Cancle Event");
        lblModfyEventBt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblModfyEventBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblModfyEventBtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblModfyEventBtMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModfyEventBtMouseClicked(evt);
            }
        });
        add(lblModfyEventBt);
        lblModfyEventBt.setBounds(410, 430, 150, 40);

        lblModifyEventBt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblModifyEventBt.setForeground(new java.awt.Color(255, 255, 255));
        lblModifyEventBt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblModifyEventBt.setText("Modify Event");
        lblModifyEventBt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblModifyEventBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblModifyEventBtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblModifyEventBtMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModifyEventBtMouseClicked(evt);
            }
        });
        add(lblModifyEventBt);
        lblModifyEventBt.setBounds(220, 430, 150, 40);

        lblAddEventBt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblAddEventBt.setForeground(new java.awt.Color(255, 255, 255));
        lblAddEventBt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddEventBt.setText("Create Event");
        lblAddEventBt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblAddEventBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblAddEventBtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblAddEventBtMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddEventBtMouseClicked(evt);
            }
        });
        add(lblAddEventBt);
        lblAddEventBt.setBounds(40, 430, 150, 40);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/Untitled-1.png"))); // NOI18N
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 227, 117), 2));
        add(jLabel3);
        jLabel3.setBounds(0, 0, 970, 570);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/panelBody.PNG"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 970, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void lblAddEventBtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddEventBtMouseExited

        lblAddEventBt.setBorder(new LineBorder(Color.WHITE));
    }//GEN-LAST:event_lblAddEventBtMouseExited

    private void lblAddEventBtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddEventBtMouseEntered

        lblAddEventBt.setBorder(new LineBorder(new Color(43, 217, 127)));
    }//GEN-LAST:event_lblAddEventBtMouseEntered

    private void lblModifyEventBtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModifyEventBtMouseExited

        lblModifyEventBt.setBorder(new LineBorder(Color.white));
    }//GEN-LAST:event_lblModifyEventBtMouseExited

    private void lblModifyEventBtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModifyEventBtMouseEntered

        lblModifyEventBt.setBorder(new LineBorder(new Color(43, 217, 127)));
    }//GEN-LAST:event_lblModifyEventBtMouseEntered

    private void lblModifyEventBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModifyEventBtMouseClicked
        modifyEvent();
    }//GEN-LAST:event_lblModifyEventBtMouseClicked

    private void lblModfyEventBtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBtMouseExited

        lblModfyEventBt.setBorder(new LineBorder(Color.white));
    }//GEN-LAST:event_lblModfyEventBtMouseExited

    private void lblModfyEventBtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBtMouseEntered

        lblModfyEventBt.setBorder(new LineBorder(new Color(43, 217, 127)));
    }//GEN-LAST:event_lblModfyEventBtMouseEntered

    private void lblModfyEventBt1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBt1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_lblModfyEventBt1MouseEntered

    private void lblModfyEventBt1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBt1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_lblModfyEventBt1MouseExited

    private void lblModfyEventBt1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBt1MouseClicked
        SettingsPanel s = new SettingsPanel();
        homeFrame.panelBody.removeAll();
        s.setSize(panelBody.getSize());
        homeFrame.panelBody.add(s);
        homeFrame.panelBody.revalidate();
        homeFrame.panelBody.repaint();
    }//GEN-LAST:event_lblModfyEventBt1MouseClicked

    private void lblAddEventBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddEventBtMouseClicked
        try {
            createEvent();
        } catch (SQLException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lblAddEventBtMouseClicked

    private void lblModfyEventBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBtMouseClicked
        try {
            removeEvent();
        } catch (SQLException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lblModfyEventBtMouseClicked

    private void tblEventsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEventsMouseClicked
        setToTextFields();
    }//GEN-LAST:event_tblEventsMouseClicked

    private void txtEventIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventIdActionPerformed
        txtEventDescription.requestFocus();
    }//GEN-LAST:event_txtEventIdActionPerformed

    private void txtEventDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventDescriptionActionPerformed
        datePickerEventDate.requestFocus();
    }//GEN-LAST:event_txtEventDescriptionActionPerformed

    private void datePickerEventDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datePickerEventDateActionPerformed
        txtEventTime.requestFocus();
    }//GEN-LAST:event_datePickerEventDateActionPerformed

    private void txtEventTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventTimeActionPerformed
        txtEventPlace.requestFocus();
    }//GEN-LAST:event_txtEventTimeActionPerformed

    private void txtEventPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventPlaceActionPerformed
        txtEventChargers.requestFocus();
    }//GEN-LAST:event_txtEventPlaceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker datePickerEventDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddEventBt;
    private javax.swing.JLabel lblModfyEventBt;
    private javax.swing.JLabel lblModfyEventBt1;
    private javax.swing.JLabel lblModifyEventBt;
    private javax.swing.JTable tblEvents;
    private javax.swing.JTextField txtEventChargers;
    private javax.swing.JTextField txtEventDescription;
    private javax.swing.JTextField txtEventId;
    private javax.swing.JTextField txtEventPlace;
    private javax.swing.JTextField txtEventTime;
    // End of variables declaration//GEN-END:variables

    /**
     * load the table with the events
     */
    public void loadToTable() {
        try {
            EventController eventController = new ControllerFactoryImpl().getEventController();
            ArrayList<Events> allEvents = eventController.getAllEvents();

            DefaultTableModel dtm = (DefaultTableModel) tblEvents.getModel();
            dtm.setRowCount(0);
            for (Events allEvent : allEvents) {
                if (allEvent != null) {
                    Object[] rows = {allEvent.geteId(), allEvent.getDescription(), allEvent.getDate()};
                    dtm.addRow(rows);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * cancel the created event
     *
     */
    private void modifyEvent() {

        try {
            String name = txtEventId.getText();
            String description = txtEventDescription.getText();
            String date = datePickerEventDate.getDate().toString();
            String time = txtEventTime.getText();
            String place = txtEventPlace.getText();
            double chargers = Double.parseDouble(txtEventChargers.getText());

            Events events = new Events(name, description, date, time, place, chargers);
            EventController eventController = new ControllerFactoryImpl().getEventController();
            boolean updateEvent = eventController.updateEvent(events);

            if (updateEvent) {
                new OptionPaneAddedSuccess(homeFrame, true, "Updated Success..");
                loadToTable();
                clearTextFields();
            } else {
                new OptionPaneAddedSuccess(homeFrame, true, "Updated Fail");
            }
        } catch (SQLException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * create a new event
     *
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private void createEvent() throws SQLException, ClassNotFoundException {

        String name = txtEventId.getText();
        String description = txtEventDescription.getText();
        String date = datePickerEventDate.getDate().toString();
        String time = txtEventTime.getText();
        String place = txtEventPlace.getText();
        double chargers = Double.parseDouble(txtEventChargers.getText());

        Events events = new Events(name, description, date, time, place, chargers);
        EventController eventController = new ControllerFactoryImpl().getEventController();
        boolean res = eventController.addEvent(events);
        if (res) {
            new OptionPaneAddedSuccess(homeFrame, true, "Event Added Success");
            loadToTable();
            clearTextFields();
        } else {
            new OptionPaneAddedSuccess(homeFrame, true, "Event Added Fail");

        }

    }

    /**
     * remove a created event
     *
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private void removeEvent() throws SQLException, ClassNotFoundException {

        String name = txtEventId.getText();
        EventController eventController = new ControllerFactoryImpl().getEventController();
        boolean deleteEvent = eventController.deleteEvent(name);
        if (deleteEvent) {
            new OptionPaneAddedSuccess(homeFrame, true, "Deleted Success..");
            loadToTable();
            clearTextFields();
        } else {
            new OptionPaneAddedSuccess(homeFrame, true, "Deleted Fail..");
        }
    }

    /**
     * This Method is used to set data to textFields from the table (getting id
     * from selected row of the table and it was send to database to choose the
     * relevant data of the set)
     */
    public void setToTextFields() {
        String newId = "";
        String date = "";
        String description = "";
        String place = "";
        String price = "";
        String time = "";
        try {
            String id = (String) tblEvents.getValueAt(tblEvents.getSelectedRow(), 0);
            EventController eventController = new ControllerFactoryImpl().getEventController();
            ArrayList<Events> list = eventController.setToTextFields(id);
            for (Events list1 : list) {
                newId = list1.geteId();
                date = list1.getDate();
                description = list1.getDescription();
                place = list1.getPlace();
                price = Double.toString(list1.getPrice());
                time = list1.getTime();
            }
            txtEventId.setText(newId);
            txtEventPlace.setText(place);
            txtEventTime.setText(time);
            txtEventChargers.setText(price);
            txtEventDescription.setText(description);
        } catch (SQLException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * create the text fields empty
     */
    public void clearTextFields() {
        txtEventChargers.setText(null);
        txtEventTime.setText(null);
        txtEventPlace.setText(null);
        txtEventDescription.setText(null);

    }

}

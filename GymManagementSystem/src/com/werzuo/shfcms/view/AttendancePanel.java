/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.werzuo.shfcms.view;

import com.werzuo.shfcms.common.IDGenarator;
import com.werzuo.shfcms.controller.AttendanceController;
import com.werzuo.shfcms.controller.MemberController;
import com.werzuo.shfcms.controller.UserController;
import com.werzuo.shfcms.controllerfactoryimpl.ControllerFactoryImpl;
import com.werzuo.shfcms.model.Attendance;
import com.werzuo.shfcms.model.Member;
import com.werzuo.shfcms.model.User;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kaushalya
 * @author neox
 */
public class AttendancePanel extends javax.swing.JPanel {

    private HashMap<String,String> aidSet = new HashMap<>();
    private DefaultTableModel dtm;
    private String inTime;
    private LinkedList<Attendance> tableDate = null;
    private ArrayList<Attendance> attendances = new ArrayList<>();

    /**
     * Creates new form AttendancePanel
     */
    public AttendancePanel() {
        initComponents();
        setUpUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblOnGoingPlayers = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAttendnce = new javax.swing.JTable();
        txtMemberId = new javax.swing.JTextField();
        txtCustomerName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btpayment = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(47, 227, 117), 2));
        setLayout(null);

        lblOnGoingPlayers.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblOnGoingPlayers.setForeground(new java.awt.Color(255, 255, 255));
        lblOnGoingPlayers.setText("0");
        add(lblOnGoingPlayers);
        lblOnGoingPlayers.setBounds(270, 480, 50, 40);

        jScrollPane1.setBackground(new Color(0,0,0,0));
        jScrollPane1.setOpaque(false);

        tblAttendnce.setBackground(new Color(0,0,0,0));
        tblAttendnce.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblAttendnce.setForeground(new java.awt.Color(255, 255, 255));
        tblAttendnce.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "  Member ID", "     Customer Name", "     In Time", "    Out Time"
            }
        ));
        tblAttendnce.setEnabled(false);
        tblAttendnce.setOpaque(false);
        tblAttendnce.setRowHeight(25);
        jScrollPane1.setViewportView(tblAttendnce);
        tblAttendnce.setOpaque(false);
        ((DefaultTableCellRenderer)tblAttendnce.getDefaultRenderer(Object.class)).setOpaque(false);
        if (tblAttendnce.getColumnModel().getColumnCount() > 0) {
            tblAttendnce.getColumnModel().getColumn(0).setMinWidth(100);
            tblAttendnce.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblAttendnce.getColumnModel().getColumn(0).setMaxWidth(100);
            tblAttendnce.getColumnModel().getColumn(2).setMinWidth(100);
            tblAttendnce.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblAttendnce.getColumnModel().getColumn(2).setMaxWidth(100);
            tblAttendnce.getColumnModel().getColumn(3).setMinWidth(100);
            tblAttendnce.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblAttendnce.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(100, 130, 770, 320);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);

        txtMemberId.setForeground(new java.awt.Color(255, 255, 255));
        txtMemberId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMemberId.setCaretColor(new java.awt.Color(255, 255, 255));
        txtMemberId.setOpaque(false);
        txtMemberId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMemberIdActionPerformed(evt);
            }
        });
        txtMemberId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMemberIdKeyReleased(evt);
            }
        });
        add(txtMemberId);
        txtMemberId.setBounds(680, 80, 190, 30);

        txtCustomerName.setBackground(new Color(0,0,0,0));
        txtCustomerName.setForeground(new java.awt.Color(255, 255, 255));
        txtCustomerName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCustomerName.setCaretColor(new java.awt.Color(255, 255, 255));
        txtCustomerName.setOpaque(false);
        txtCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustomerNameActionPerformed(evt);
            }
        });
        txtCustomerName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustomerNameKeyReleased(evt);
            }
        });
        add(txtCustomerName);
        txtCustomerName.setBounds(230, 80, 230, 30);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("No of On going players :");
        add(jLabel7);
        jLabel7.setBounds(100, 480, 170, 40);

        btpayment.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btpayment.setForeground(new java.awt.Color(255, 255, 255));
        btpayment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btpayment.setText("Payment");
        btpayment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        btpayment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btpaymentMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btpaymentMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btpaymentMouseExited(evt);
            }
        });
        add(btpayment);
        btpayment.setBounds(750, 480, 120, 40);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Member ID");
        add(jLabel5);
        jLabel5.setBounds(580, 80, 110, 30);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Customer Search");
        add(jLabel4);
        jLabel4.setBounds(100, 80, 150, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(43, 227, 117));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Attendance");
        add(jLabel3);
        jLabel3.setBounds(810, 0, 160, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/Untitled-1.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 227, 117), 2));
        add(jLabel2);
        jLabel2.setBounds(0, 0, 970, 570);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/panelBody.PNG"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 970, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void txtMemberIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMemberIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMemberIdActionPerformed

    private void btpaymentMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btpaymentMouseEntered
        btpayment.setBorder(new LineBorder(new Color(43, 227, 117)));
    }//GEN-LAST:event_btpaymentMouseEntered

    private void btpaymentMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btpaymentMouseExited
        btpayment.setBorder(new LineBorder(Color.WHITE));
        btpayment.setForeground(Color.WHITE);
    }//GEN-LAST:event_btpaymentMouseExited

    private void btpaymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btpaymentMouseClicked
        btpayment.setForeground(new Color(43, 227, 117));
    }//GEN-LAST:event_btpaymentMouseClicked

    private void txtCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustomerNameActionPerformed
        try {
            searchCustomerById();
            getOngoingCount();
        } catch (SQLException ex) {
            Logger.getLogger(AttendancePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AttendancePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCustomerNameActionPerformed

    private void txtCustomerNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustomerNameKeyReleased

    }//GEN-LAST:event_txtCustomerNameKeyReleased

    private void txtMemberIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMemberIdKeyReleased
        try {
            searchMemberByCid();
            getOngoingCount();
        } catch (SQLException ex) {
            Logger.getLogger(AttendancePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AttendancePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtMemberIdKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btpayment;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblOnGoingPlayers;
    private javax.swing.JTable tblAttendnce;
    private javax.swing.JTextField txtCustomerName;
    private javax.swing.JTextField txtMemberId;
    // End of variables declaration//GEN-END:variables

    /**
     * check the member is in the attendance table
     *
     * @param memberId
     * @return
     */
    private int checkMemberIfExists(String memberId) {

        int row = -1;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            String valueOf = String.valueOf(dtm.getValueAt(i, 0));
            if (!valueOf.isEmpty()) {
                if (valueOf.equalsIgnoreCase(memberId)) {
                    inTime = String.valueOf(dtm.getValueAt(i, 2));
                    row = i;
                    break;
                }
            }
        }

        return row;
    }

    /**
     * get the daily on going members
     *
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private void getOnGoingMembers() throws SQLException, ClassNotFoundException {

        String date = HomeFrame.getDate();
        AttendanceController attendanceController
                = new ControllerFactoryImpl().getAttendanceController();
        ArrayList<Attendance> temp = attendanceController.searchDailyAttendance(date);

        if (temp != null) {
            for (Attendance attendance : temp) {
                String name = getMemberName(attendance.getCid());
                Object[] row = {attendance.getCid(), name, attendance.getInTime(), attendance.getOutTime()};
                dtm.addRow(row);
            }
        }
    }

    /**
     * set up the user interface
     */
    private void setUpUI() {
        try {
            dtm = (DefaultTableModel) tblAttendnce.getModel();
            getOnGoingMembers();
            getOngoingCount();
            setHashMap();
        } catch (SQLException ex) {
            Logger.getLogger(AttendancePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AttendancePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String getAttendanceID() throws SQLException, ClassNotFoundException {
        String newID = IDGenarator.getNewID("attendance", "aid", "A");
        return newID;
    }

    /**
     * get the on going players list count
     */
    private void getOngoingCount() {
        int count = 0;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            String value = (String) dtm.getValueAt(i, 3);
            System.out.println(value);
            if ((value==null) /*|| (value.isEmpty())*/) {
                count++;
            }
        }
        lblOnGoingPlayers.setText(Integer.toString(count));
        
    }

    /**
     * search the customer by member id
     *
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private void searchCustomerById() throws SQLException, ClassNotFoundException {

        String memberId = txtCustomerName.getText();
        
        String time = HomeFrame.getTime();
        int checked = checkMemberIfExists(memberId);
        String memberName = getMemberName(memberId);
        AttendanceController attendanceController = new ControllerFactoryImpl().getAttendanceController();
       
        String newInTime = null;
        
        if ((!memberName.equals("")) && (memberId != null)) {
            if (checked > -1) {
                dtm.removeRow(checked);
                Object[] row = {memberId, memberName, inTime, time};
                dtm.addRow(row);
                Attendance attendance = new Attendance(aidSet.get(memberId)
                        , memberId, HomeFrame.getDate(), inTime, time, HomeFrame.userName);
                aidSet.remove(memberId);
                System.out.println("In time 02 :"+ newInTime);
                System.out.println("Out time 02 :"+ time);
                attendanceController.updateAttendance(attendance);
                getOngoingCount();
            } else {
                String newID = getAttendanceID();
                Object[] row = {memberId, memberName, time, null};
                dtm.addRow(row);
                aidSet.put(memberId,newID);
                newInTime = HomeFrame.getTime();
                Attendance attendance = new Attendance(newID
                        , memberId, HomeFrame.getDate(), newInTime, null, HomeFrame.userName);
                System.out.println("In time 01 :"+ newInTime);
                System.out.println("Out time 01 :"+ null);
                attendanceController.addAttendance(attendance);
                getOngoingCount();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No member found !");
        }
    }

    /**
     * search the customer by name
     */
    private void seachCustomerByName() throws SQLException, ClassNotFoundException {
        String searchName = txtCustomerName.getText();
        if (!searchName.equalsIgnoreCase("")) {
            dtm.setRowCount(0);
            for (Attendance attend : attendances) {
                String name = getMemberName(attend.getCid());
                if (name.contains(searchName)) {
                    Object[] row = {attend.getCid(), name, attend.getInTime(), attend.getOutTime()};
                    dtm.addRow(row);
                }
            }
        } else {
            setUpUI();
        }
    }

    /**
     * search member according to name
     *
     * @param cid
     * @return
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private String getMemberName(String cid) throws SQLException, ClassNotFoundException {
        MemberController memberController
                = new ControllerFactoryImpl().getMemberController();
        Member searchMember = memberController.searchMember(cid);
        String memberName = searchMember.getfName() + " " + searchMember.getlName();

        return memberName;
    }

    /**
     * search member according to MemberID
     *
     * @throws SQLException
     * @throws ClassNotFoundException
     */
    private void searchMemberByCid() throws SQLException, ClassNotFoundException {
        String searchCid = txtMemberId.getText();
        if (!searchCid.equalsIgnoreCase("")) {
            dtm.setRowCount(0);
            for (Attendance attend : attendances) {
                String name = getMemberName(attend.getCid());
                if (attend.getCid().equalsIgnoreCase(searchCid)) {
                    Object[] row = {attend.getCid(), name, attend.getInTime(), attend.getOutTime()};
                    dtm.addRow(row);
                }
            }
        } else {
            setUpUI();
        }
    }

    private void setHashMap() {
        /*AttendanceController atdController = new ControllerFactoryImpl().getAttendanceController();
        atdController.getPlayingMembers(HomeFrame.getDate());*/
    }
}

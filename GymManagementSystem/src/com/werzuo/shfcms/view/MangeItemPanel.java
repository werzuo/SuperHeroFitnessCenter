/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.werzuo.shfcms.view;

import com.werzuo.shfcms.controller.ItemController;
import com.werzuo.shfcms.controllerfactoryimpl.ControllerFactoryImpl;
import com.werzuo.shfcms.model.Item;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ravindu
 * @author robin
 */
public class MangeItemPanel extends javax.swing.JPanel {

    /**
     * Creates new form MangeItemPanel
     */
    private HomeFrame homeFrame;

    public MangeItemPanel() {
        initComponents();
        loadToTable();
    }

    public MangeItemPanel(HomeFrame homeFrame) {
        initComponents();
        this.homeFrame = homeFrame;
        loadToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        textItemId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        lblAddEventBt1 = new javax.swing.JButton();
        lblModfyEventBt = new javax.swing.JLabel();
        lblCancleEventBt = new javax.swing.JLabel();
        lblModfyEventBt1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        textItemQty = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textItemName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(null);

        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Item ID", "Item", "Qty"
            }
        ));
        tblItem.setRowHeight(25);
        tblItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItem);
        if (tblItem.getColumnModel().getColumnCount() > 0) {
            tblItem.getColumnModel().getColumn(0).setMinWidth(70);
            tblItem.getColumnModel().getColumn(0).setPreferredWidth(70);
            tblItem.getColumnModel().getColumn(0).setMaxWidth(70);
            tblItem.getColumnModel().getColumn(1).setMinWidth(150);
            tblItem.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblItem.getColumnModel().getColumn(1).setMaxWidth(150);
            tblItem.getColumnModel().getColumn(2).setMinWidth(70);
            tblItem.getColumnModel().getColumn(2).setPreferredWidth(70);
            tblItem.getColumnModel().getColumn(2).setMaxWidth(70);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(560, 70, 290, 402);

        textItemId.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        textItemId.setForeground(new java.awt.Color(255, 255, 255));
        textItemId.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textItemId.setCaretColor(new java.awt.Color(255, 255, 255));
        textItemId.setOpaque(false);
        textItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textItemIdActionPerformed(evt);
            }
        });
        add(textItemId);
        textItemId.setBounds(190, 100, 220, 30);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Item Id");
        add(jLabel12);
        jLabel12.setBounds(50, 100, 100, 30);

        lblAddEventBt1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblAddEventBt1.setForeground(new java.awt.Color(255, 255, 255));
        lblAddEventBt1.setText("Add new Item");
        lblAddEventBt1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblAddEventBt1.setContentAreaFilled(false);
        lblAddEventBt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblAddEventBt1ActionPerformed(evt);
            }
        });
        add(lblAddEventBt1);
        lblAddEventBt1.setBounds(370, 350, 130, 40);

        lblModfyEventBt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblModfyEventBt.setForeground(new java.awt.Color(255, 255, 255));
        lblModfyEventBt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblModfyEventBt.setText("Remove Item");
        lblModfyEventBt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblModfyEventBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModfyEventBtMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblModfyEventBtMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblModfyEventBtMouseExited(evt);
            }
        });
        add(lblModfyEventBt);
        lblModfyEventBt.setBounds(80, 350, 130, 40);

        lblCancleEventBt.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblCancleEventBt.setForeground(new java.awt.Color(255, 255, 255));
        lblCancleEventBt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCancleEventBt.setText("Modify Item");
        lblCancleEventBt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblCancleEventBt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCancleEventBtMouseClicked(evt);
            }
        });
        add(lblCancleEventBt);
        lblCancleEventBt.setBounds(230, 350, 130, 40);

        lblModfyEventBt1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblModfyEventBt1.setForeground(new java.awt.Color(255, 255, 255));
        lblModfyEventBt1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblModfyEventBt1.setText("Back");
        lblModfyEventBt1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblModfyEventBt1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblModfyEventBt1MouseClicked(evt);
            }
        });
        add(lblModfyEventBt1);
        lblModfyEventBt1.setBounds(810, 500, 120, 40);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Qty");
        add(jLabel10);
        jLabel10.setBounds(50, 260, 100, 30);

        textItemQty.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        textItemQty.setForeground(new java.awt.Color(255, 255, 255));
        textItemQty.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textItemQty.setCaretColor(new java.awt.Color(255, 255, 255));
        textItemQty.setOpaque(false);
        textItemQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textItemQtyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textItemQtyKeyReleased(evt);
            }
        });
        add(textItemQty);
        textItemQty.setBounds(190, 260, 220, 30);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Item Name");
        add(jLabel11);
        jLabel11.setBounds(50, 180, 100, 30);

        textItemName.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        textItemName.setForeground(new java.awt.Color(255, 255, 255));
        textItemName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textItemName.setCaretColor(new java.awt.Color(255, 255, 255));
        textItemName.setOpaque(false);
        textItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textItemNameActionPerformed(evt);
            }
        });
        textItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textItemNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textItemNameKeyReleased(evt);
            }
        });
        add(textItemName);
        textItemName.setBounds(190, 180, 220, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(43, 227, 117));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Manage Item");
        add(jLabel3);
        jLabel3.setBounds(700, 0, 270, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/Untitled-1.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 227, 117), 2));
        add(jLabel2);
        jLabel2.setBounds(0, 0, 970, 570);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/panelBody.PNG"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 970, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void textItemQtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemQtyKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            updateItemText();
        }
    }//GEN-LAST:event_textItemQtyKeyPressed

    private void textItemQtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemQtyKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_textItemQtyKeyReleased

    private void textItemNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_textItemNameKeyPressed

    private void textItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textItemNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_textItemNameKeyReleased

    private void lblModfyEventBtMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBtMouseEntered

        lblModfyEventBt.setBorder(new LineBorder(new Color(43, 217, 127)));
    }//GEN-LAST:event_lblModfyEventBtMouseEntered

    private void lblCancleEventBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCancleEventBtMouseClicked
        updateItem();
    }//GEN-LAST:event_lblCancleEventBtMouseClicked

    private void lblModfyEventBt1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBt1MouseClicked
        SettingsPanel s = new SettingsPanel();
        homeFrame.panelBody.removeAll();
        s.setSize(homeFrame.panelBody.getSize());
        homeFrame.panelBody.add(s);
        homeFrame.panelBody.revalidate();
        homeFrame.panelBody.repaint();
    }//GEN-LAST:event_lblModfyEventBt1MouseClicked

    private void tblItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemMouseClicked
        setToTextFields();
    }//GEN-LAST:event_tblItemMouseClicked

    private void lblModfyEventBtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBtMouseClicked
        removeItem();
    }//GEN-LAST:event_lblModfyEventBtMouseClicked

    private void textItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textItemIdActionPerformed
        textItemName.requestFocus();
    }//GEN-LAST:event_textItemIdActionPerformed

    private void textItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textItemNameActionPerformed
        textItemQty.requestFocus();
    }//GEN-LAST:event_textItemNameActionPerformed

    private void lblModfyEventBtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblModfyEventBtMouseExited

        lblModfyEventBt.setBorder(new LineBorder(Color.white));
    }//GEN-LAST:event_lblModfyEventBtMouseExited

    private void lblAddEventBt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblAddEventBt1ActionPerformed
        addItem();
    }//GEN-LAST:event_lblAddEventBt1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton lblAddEventBt1;
    private javax.swing.JLabel lblCancleEventBt;
    private javax.swing.JLabel lblModfyEventBt;
    private javax.swing.JLabel lblModfyEventBt1;
    private javax.swing.JTable tblItem;
    private javax.swing.JTextField textItemId;
    private javax.swing.JTextField textItemName;
    private javax.swing.JTextField textItemQty;
    // End of variables declaration//GEN-END:variables
   /**
     * This method is used to send data from user interface to add an item
     */
    public void addItem() {
        try {
            String id = textItemId.getText();
            String item = textItemName.getText();
            Double qty = Double.parseDouble(textItemQty.getText());

            Item item1 = new Item(id, item, qty);
            ItemController itemController = new ControllerFactoryImpl().getItemController();
            boolean addItem = itemController.addItem(item1);
            if (addItem) {
                new OptionPaneAddedSuccess(homeFrame, true, "Item Added Success..");
                clearData();
                loadToTable();
            } else {
                new OptionPaneAddedSuccess(homeFrame, true, "Item Added Fail..");
            }

        } catch (SQLException ex) {
            String exx = ex + "";
            String output = "com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry '" + id + "' for key 'PRIMARY'";
            if (exx.equals(output)) {
                new OptionPaneAddedSuccess(homeFrame, true, "Item Exist..");
            } else {
                Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is used to get data to load the item table
     */
    public void loadToTable() {
        try {
            ItemController itemController = new ControllerFactoryImpl().getItemController();
            ArrayList<Item> allItems = itemController.getAllItems();

            DefaultTableModel dtm = (DefaultTableModel) tblItem.getModel();
            dtm.setRowCount(0);
            for (Item ai : allItems) {
                if (ai != null) {
                    Object[] rows = {ai.getItemId(), ai.getItemName(), ai.getItemQty()};
                    dtm.addRow(rows);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EventPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is used to set data into text fields from table to make a
     * successful update
     */
    String id = "";
    String name = "";
    double qty = 0.0;

    public void setToTextFields() {
        id = (String) tblItem.getValueAt(tblItem.getSelectedRow(), 0);
        name = (String) tblItem.getValueAt(tblItem.getSelectedRow(), 1);
        qty = (double) tblItem.getValueAt(tblItem.getSelectedRow(), 2);

        textItemId.setText(id);
        textItemName.setText(name);
        textItemQty.setText(Double.toString(qty));
    }

    /**
     * This method is used to send data from user interface to remove an item
     */
    public void removeItem() {
        try {
            String id = textItemId.getText();
            ItemController itemController = new ControllerFactoryImpl().getItemController();
            boolean deleteItem = itemController.deleteItem(id);
            if (deleteItem) {
                new OptionPaneAddedSuccess(homeFrame, true, "Item Removed Succeffully..");
                loadToTable();
                clearData();
            } else {
                if (id.equals("")) {
                    new OptionPaneAddedSuccess(homeFrame, true, "Please Select Item From Table To Remove..");
                } else {
                    new OptionPaneAddedSuccess(homeFrame, true, "Item Removed Fail..");
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is used to send data from user interface to update an item
     */
    public void updateItem() {
        try {
            String id = textItemId.getText();
            String item = textItemName.getText();
            Double qty = Double.parseDouble(textItemQty.getText());
            Item item1 = new Item(id, item, qty);

            ItemController itemController = new ControllerFactoryImpl().getItemController();
            if (!syncData()) {

                boolean updateItem = itemController.updateItem(item1);
                if (updateItem) {
                    new OptionPaneAddedSuccess(homeFrame, true, "Item updated Succeffully..");
                    loadToTable();
                    clearData();
                } else {
                    new OptionPaneAddedSuccess(homeFrame, true, "Item updated fail..");
                }
            } else {
                OptionPaneAddedSuccess os = new OptionPaneAddedSuccess(homeFrame, true, "No Item update Pending..");
                os.dispose();

                loadToTable();
            }

        } catch (SQLException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {

        }

    }

    public void updateItemText() {
        try {
            String id = textItemId.getText();
            String item = textItemName.getText();
            Double qty = Double.parseDouble(textItemQty.getText());
            Item item1 = new Item(id, item, qty);

            ItemController itemController = new ControllerFactoryImpl().getItemController();
            if (!syncData()) {

                boolean updateItem = itemController.updateItem(item1);
                if (updateItem) {
                    new OptionPaneAddedSuccess(homeFrame, true, "Item updated Succeffully..");
                    loadToTable();
                    clearData();
                } else {
                    new OptionPaneAddedSuccess(homeFrame, true, "Item updated fail..");
                }
            } else {
                lblAddEventBt1.doClick();
                loadToTable();
            }

        } catch (SQLException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException ex) {

        }

    }

    public boolean syncData() {
        boolean ifs = false;
        try {
            String iId = textItemId.getText();
            String iName = textItemName.getText();
            double iqty = Double.parseDouble(textItemQty.getText());
            Item sI = new ControllerFactoryImpl().getItemController().SearchItem(iId);

            if (iId.equals(sI.getItemId()) && iName.equals(sI.getItemName()) && iqty == sI.getItemQty()) {
                ifs = true;
            }

        } catch (SQLException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MangeItemPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        return ifs;
    }

    public void clearData() {
        textItemId.requestFocus();
        textItemId.setText("");
        textItemName.setText("");
        textItemQty.setText("");
    }
}

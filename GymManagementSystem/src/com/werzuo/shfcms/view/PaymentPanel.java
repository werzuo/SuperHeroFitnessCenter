/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.werzuo.shfcms.view;

import com.werzuo.shfcms.common.Validation;
import com.werzuo.shfcms.controller.MemberController;
import com.werzuo.shfcms.controller.PaymentController;
import com.werzuo.shfcms.controllerfactoryimpl.ControllerFactoryImpl;
import com.werzuo.shfcms.model.Member;
import com.werzuo.shfcms.model.MemberRegistration;
import com.werzuo.shfcms.model.OtherMeasurement;
import com.werzuo.shfcms.model.Payment;
import com.werzuo.shfcms.model.PaymentArrears;
import com.werzuo.shfcms.model.PaymentType;
import com.werzuo.shfcms.model.PhysicalDetails;
import com.werzuo.shfcms.model.RegDetails;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kaushalya
 */
public class PaymentPanel extends javax.swing.JPanel {

    private DefaultTableModel dtm;
    private HomeFrame homeFrame;
    private RegDetails regDetails;
    private OtherMeasurement otherMeasurement;
    private Member member;
    private PhysicalDetails physicalDetails;
    private ArrayList<PaymentType> viewAllPaymentType;

    /**
     * Creates new form PaymentPanel
     */
    public PaymentPanel() {
        initComponents();
        dtm = (DefaultTableModel) tblArrious.getModel();
    }

    public PaymentPanel(HomeFrame home, Member member, RegDetails regDetails,
            OtherMeasurement otherMeasurement, PhysicalDetails physicalDetails) {
        initComponents();
        this.homeFrame = homeFrame;
        this.regDetails = regDetails;
        this.member = member;
        this.otherMeasurement = otherMeasurement;
        this.physicalDetails = physicalDetails;
        dtm = (DefaultTableModel) tblArrious.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblArrious = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtTotArrears = new javax.swing.JTextField();
        txtFullName = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtGrandTotal = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cbPaymentType = new javax.swing.JComboBox();
        btnProceed = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtPayment = new javax.swing.JTextField();
        txtFee = new javax.swing.JTextField();
        txtMembershipNo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtNic = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(47, 227, 117), 2));
        setLayout(null);

        jScrollPane1.setBackground(new Color(0,0,0,0)
        );
        jScrollPane1.setOpaque(false);

        tblArrious.setBackground(new Color(0,0,0,0));
        tblArrious.setForeground(new java.awt.Color(255, 255, 255));
        tblArrious.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArrious.setOpaque(false);
        tblArrious.setRowHeight(25);
        jScrollPane1.setViewportView(tblArrious);
        if (tblArrious.getColumnModel().getColumnCount() > 0) {
            tblArrious.getColumnModel().getColumn(0).setResizable(false);
            tblArrious.getColumnModel().getColumn(1).setResizable(false);
        }
        tblArrious.setOpaque(false);
        ((DefaultTableCellRenderer)tblArrious.getDefaultRenderer(Object.class)).setOpaque(false);

        add(jScrollPane1);
        jScrollPane1.setBounds(50, 150, 390, 330);
        jScrollPane1.setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel15.setText("Payment Type");
        add(jLabel15);
        jLabel15.setBounds(500, 200, 100, 30);

        jLabel18.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Full Name");
        add(jLabel18);
        jLabel18.setBounds(500, 150, 100, 30);

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel21.setText("Total Arrears");
        add(jLabel21);
        jLabel21.setBounds(500, 300, 100, 30);

        txtTotArrears.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtTotArrears.setForeground(new java.awt.Color(255, 255, 255));
        txtTotArrears.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTotArrears.setCaretColor(new java.awt.Color(255, 255, 255));
        txtTotArrears.setOpaque(false);
        txtTotArrears.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotArrearsActionPerformed(evt);
            }
        });
        txtTotArrears.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTotArrearsKeyReleased(evt);
            }
        });
        add(txtTotArrears);
        txtTotArrears.setBounds(630, 300, 220, 30);

        txtFullName.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtFullName.setForeground(new java.awt.Color(255, 255, 255));
        txtFullName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFullName.setCaretColor(new java.awt.Color(255, 255, 255));
        txtFullName.setOpaque(false);
        txtFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFullNameActionPerformed(evt);
            }
        });
        txtFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFullNameKeyReleased(evt);
            }
        });
        add(txtFullName);
        txtFullName.setBounds(630, 150, 220, 30);

        txtBalance.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtBalance.setForeground(new java.awt.Color(255, 255, 255));
        txtBalance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtBalance.setCaretColor(new java.awt.Color(255, 255, 255));
        txtBalance.setOpaque(false);
        txtBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBalanceActionPerformed(evt);
            }
        });
        txtBalance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBalanceKeyReleased(evt);
            }
        });
        add(txtBalance);
        txtBalance.setBounds(630, 450, 220, 30);

        jLabel20.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel20.setText("Balance");
        add(jLabel20);
        jLabel20.setBounds(500, 450, 100, 30);

        txtGrandTotal.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtGrandTotal.setForeground(new java.awt.Color(255, 255, 255));
        txtGrandTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtGrandTotal.setCaretColor(new java.awt.Color(255, 255, 255));
        txtGrandTotal.setOpaque(false);
        txtGrandTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGrandTotalActionPerformed(evt);
            }
        });
        txtGrandTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGrandTotalKeyReleased(evt);
            }
        });
        add(txtGrandTotal);
        txtGrandTotal.setBounds(630, 350, 220, 30);

        jLabel19.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel19.setText("Grand Total");
        add(jLabel19);
        jLabel19.setBounds(500, 350, 100, 30);

        cbPaymentType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbPaymentTypeItemStateChanged(evt);
            }
        });
        add(cbPaymentType);
        cbPaymentType.setBounds(630, 200, 220, 30);

        btnProceed.setText("Proceed");
        btnProceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProceedActionPerformed(evt);
            }
        });
        add(btnProceed);
        btnProceed.setBounds(810, 510, 100, 40);

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("Fee");
        add(jLabel16);
        jLabel16.setBounds(500, 250, 100, 30);

        jLabel17.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel17.setText("Payment");
        add(jLabel17);
        jLabel17.setBounds(500, 400, 100, 30);

        txtPayment.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtPayment.setForeground(new java.awt.Color(255, 255, 255));
        txtPayment.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPayment.setCaretColor(new java.awt.Color(255, 255, 255));
        txtPayment.setOpaque(false);
        txtPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPaymentActionPerformed(evt);
            }
        });
        txtPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPaymentKeyReleased(evt);
            }
        });
        add(txtPayment);
        txtPayment.setBounds(630, 400, 220, 30);

        txtFee.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtFee.setForeground(new java.awt.Color(255, 255, 255));
        txtFee.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFee.setCaretColor(new java.awt.Color(255, 255, 255));
        txtFee.setOpaque(false);
        txtFee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFeeActionPerformed(evt);
            }
        });
        txtFee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFeeKeyReleased(evt);
            }
        });
        add(txtFee);
        txtFee.setBounds(630, 250, 220, 30);

        txtMembershipNo.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtMembershipNo.setForeground(new java.awt.Color(255, 255, 255));
        txtMembershipNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMembershipNo.setCaretColor(new java.awt.Color(255, 255, 255));
        txtMembershipNo.setOpaque(false);
        txtMembershipNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMembershipNoActionPerformed(evt);
            }
        });
        txtMembershipNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMembershipNoKeyReleased(evt);
            }
        });
        add(txtMembershipNo);
        txtMembershipNo.setBounds(180, 80, 170, 30);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Membership No");
        add(jLabel12);
        jLabel12.setBounds(200, 50, 120, 30);

        txtNic.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        txtNic.setForeground(new java.awt.Color(255, 255, 255));
        txtNic.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNic.setCaretColor(new java.awt.Color(255, 255, 255));
        txtNic.setOpaque(false);
        txtNic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNicActionPerformed(evt);
            }
        });
        txtNic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNicKeyReleased(evt);
            }
        });
        add(txtNic);
        txtNic.setBounds(540, 80, 170, 30);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("NIC");
        add(jLabel13);
        jLabel13.setBounds(610, 50, 30, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(43, 227, 117));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Payment");
        add(jLabel3);
        jLabel3.setBounds(840, 0, 130, 50);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/Untitled-1.png"))); // NOI18N
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(43, 227, 117), 2));
        add(jLabel2);
        jLabel2.setBounds(0, 0, 970, 570);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/werzuo/shfcms/images/panelBody.PNG"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(0, 0, 970, 570);
    }// </editor-fold>//GEN-END:initComponents

    private void txtMembershipNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMembershipNoActionPerformed
        searchPayment();
    }//GEN-LAST:event_txtMembershipNoActionPerformed

    private void txtMembershipNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMembershipNoKeyReleased
        if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE) {
            Toolkit.getDefaultToolkit();
            Validation.memberId(txtMembershipNo);
        }
    }//GEN-LAST:event_txtMembershipNoKeyReleased

    private void txtNicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNicActionPerformed
        searchPaymentByNIC();
    }//GEN-LAST:event_txtNicActionPerformed

    private void txtNicKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNicKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNicKeyReleased

    private void txtFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFeeActionPerformed

    private void txtFeeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFeeKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFeeKeyReleased

    private void txtPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPaymentActionPerformed
        double grandTot = Double.parseDouble(txtGrandTotal.getText());
        double nowPay = Double.parseDouble(txtPayment.getText());
        double bal = nowPay - grandTot;
        double newBal = 0.0;
        if (bal < 0) {
            newBal = bal * -1;
        }
        txtBalance.setText(Double.toString(bal));
    }//GEN-LAST:event_txtPaymentActionPerformed

    private void txtPaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaymentKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPaymentKeyReleased

    private void txtFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFullNameActionPerformed

    private void txtFullNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFullNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFullNameKeyReleased

    private void txtBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBalanceActionPerformed

    private void txtBalanceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBalanceKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBalanceKeyReleased

    private void cbPaymentTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbPaymentTypeItemStateChanged
        try {
            double total = 0.0;
            int rowCount = dtm.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                double data = Double.parseDouble(dtm.getValueAt(i, 1).toString());
                total += data;
            }
            txtTotArrears.setText(Double.toString(total));
            String paymentType = cbPaymentType.getSelectedItem().toString();
            if (!"Arrears".equals(paymentType)) {
                PaymentController pc = new ControllerFactoryImpl().getPaymentController();
                PaymentType searchPaymentTypeByType = pc.searchPaymentTypeByType(paymentType);
                double fee = searchPaymentTypeByType.getFee();
                txtFee.setText(Double.toString(fee));
                txtTotArrears.setText(Double.toString(total));
                double fee1 = Double.parseDouble(txtFee.getText());
                txtGrandTotal.setText(Double.toString(fee1 + total));
            }else{
                txtFee.setText("0.0");
                
                txtGrandTotal.setText(Double.toString(0.0 + total));
            }

        } catch (SQLException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbPaymentTypeItemStateChanged

    private void txtGrandTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGrandTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGrandTotalActionPerformed

    private void txtGrandTotalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGrandTotalKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGrandTotalKeyReleased

    private void btnProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProceedActionPerformed
        Payment payment = createPaymentModel();
        MemberRegistration memberRegistration
                = new MemberRegistration(regDetails, member, otherMeasurement, physicalDetails, payment);

    }//GEN-LAST:event_btnProceedActionPerformed

    private void txtTotArrearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotArrearsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotArrearsActionPerformed

    private void txtTotArrearsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTotArrearsKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotArrearsKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProceed;
    private javax.swing.JComboBox cbPaymentType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblArrious;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtFee;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtGrandTotal;
    private javax.swing.JTextField txtMembershipNo;
    private javax.swing.JTextField txtNic;
    private javax.swing.JTextField txtPayment;
    private javax.swing.JTextField txtTotArrears;
    // End of variables declaration//GEN-END:variables

    private void loadToPaymentTypeCb() {
        try {
            PaymentController pc = new ControllerFactoryImpl().getPaymentController();
            viewAllPaymentType = pc.viewAllPaymentType();
            int itemCount = cbPaymentType.getItemCount();
            if (itemCount > 0) {
                //cbPaymentType.removeAllItems();
            } else {
                //cbPaymentType.removeAll();
                cbPaymentType.addItem("Arrears");
                for (PaymentType viewAllPaymentType1 : viewAllPaymentType) {
                    cbPaymentType.addItem(viewAllPaymentType1.getType());
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     *
     */
    private void searchPayment() {
        try {
            txtFullName.setText("");
            txtFee.setText("");
            txtTotArrears.setText("");
            txtGrandTotal.setText("");
            txtPayment.setText("");
            txtBalance.setText("");
            double tot = 0.0;
            dtm.setRowCount(0);
            String cid = txtMembershipNo.getText();
            MemberController mc = new ControllerFactoryImpl().getMemberController();
            Member searchMember = mc.searchMember(cid);
            if (searchMember != null) {
                PaymentController pc = new ControllerFactoryImpl().getPaymentController();
                ArrayList<PaymentArrears> PaymentArrears = pc.viewAllPaymentsArrearsByCid(searchMember.getCid());
                for (PaymentArrears PaymentArrear : PaymentArrears) {
                    double arrears = PaymentArrear.getArrears();
                    String pid = PaymentArrear.getPid();
                    PaymentController pc1 = new ControllerFactoryImpl().getPaymentController();
                    Payment searchPayment = pc1.searchPayment(pid);
                    String paymentDate = searchPayment.getPaymentDate();
                    Object[] data = {paymentDate, arrears};
                    dtm.addRow(data);
                }
                String fName = searchMember.getfName();
                String lName = searchMember.getlName();
                String fullName = fName + lName;
                txtFullName.setText(fullName);

                int rowCount = dtm.getRowCount();
                for (int i = 0; i < rowCount; i++) {
                    double data = Double.parseDouble(dtm.getValueAt(i, 1).toString());
                    tot += data;
                }
                txtTotArrears.setText(Double.toString(tot));
            }

            loadToPaymentTypeCb();

        } catch (SQLException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

//    /**
//     * create the payment model
//     *
//     * @return Payment
//     */
//    private Payment createPaymentModel() {
//
//        String cid = txtMembershipNo.getText();
//
//     //   new Payment(pid, cid, ptId, date)
//    }
    private Payment createPaymentModel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void searchPaymentByNIC() {
        try {
            dtm.setRowCount(0);
            String nic = txtNic.getText();
            txtFullName.setText("");
            txtFee.setText("");
            txtTotArrears.setText("");
            txtGrandTotal.setText("");
            txtPayment.setText("");
            txtBalance.setText("");
            double tot = 0.0;
            dtm.setRowCount(0);

            MemberController mc = new ControllerFactoryImpl().getMemberController();
            Member searchMember = mc.searchCustomerByNic(nic);
            if (searchMember != null) {
                PaymentController pc = new ControllerFactoryImpl().getPaymentController();
                ArrayList<PaymentArrears> PaymentArrears = pc.viewAllPaymentsArrearsByCid(searchMember.getCid());
                for (PaymentArrears PaymentArrear : PaymentArrears) {
                    double arrears = PaymentArrear.getArrears();
                    String pid = PaymentArrear.getPid();
                    PaymentController pc1 = new ControllerFactoryImpl().getPaymentController();
                    Payment searchPayment = pc1.searchPayment(pid);
                    String paymentDate = searchPayment.getPaymentDate();
                    Object[] data = {paymentDate, arrears};
                    dtm.addRow(data);
                }
                String fName = searchMember.getfName();
                String lName = searchMember.getlName();
                String fullName = fName + lName;
                txtFullName.setText(fullName);
                loadToPaymentTypeCb();
                int rowCount = dtm.getRowCount();
                for (int i = 0; i < rowCount; i++) {
                    double data = Double.parseDouble(dtm.getValueAt(i, 1).toString());
                    tot += data;
                }
                txtTotArrears.setText(Double.toString(tot));

            }
        } catch (SQLException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PaymentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
